include "vec2.bzz"

ROBOT_MAX_VEL = 5
ROBOT_RADIUS = 10
TIME_STEP = 0.1
ROBOT_COUNT  = 5
NEIGHBOUR_DIST = 300
VELOCITY_COUNT = 100
IS_VO =  False 
OMEGA = 1


function linalg_norm(var1, var2) {
    lin_norm = math.sqrt((var1.x - var2.x)^2 + (var1.y-var2.y)^2)
    return lin_norm
}


function is_goal_reached(goal, current_location){
    lin_norm_val = linalg_norm(goal, current_location)
    return lin_norm < ROBOT_RADIUS
}


function preferred_velocity(goal, current_location) {
    if (is_gal_reached(goal, current_location))
    {direction = math.vec2.sub(goal, current_location)
    direction_unit_vector = direction/ (math.sqrt(direction.x^2 + direction.y^2))
    pref_vel = ROBOT_MAX_VEL * direction_unit_vector}
    else {
        pref_vel.x =0
        pref_vel.y =0
    }
}


function calc_vel_penalty(robot1_pos,robot2_pos, new_vel, robot2_vel, robot1_vel, pref_vel) {
    new_vel = math.vec2.sub(2*new_vel - robot1_vel)
    distance = (2*ROBOT_RADIUS) ^ 2

    # Calculate coefficients for a quadratic equation representing the time of collision

    a = (new_vel.x - robot2_vel.x) ^2 + (new_vel.y - robot2_vel.y) ^ 2
    b = 2* ((robot1_pos.x - robot2_pos.x) * (new_vel.x - robot2_vel.x) + 
            (robot1.pos.y - robot2_pos.y) * (new_vel.y - robot2_vel.y))
    
    c = (robot1_pos.x - robot1_pos.x) ^ 2 + (robot1_pos.y - robot2_pos.y) ^2 - distance 
    
    # Discriminant of the quadratic equation
    d = b^ 2- 4 *a*c

    # Ignore Glancing collisions  that may not cause a response due to limited precision
    # and lead to infinite looop  of check - Adding threshold to  reduce close collision check 
    if ((b > -0.000001) or (d <= 0)) {
        return linalg_norm(pref_vel, new_vel)
    }
    
    # Calculate the square root of the Discriminant
    e = math.sqrt(d)

    # Calculate the potential timems of collision (t1 and t2)
    t1 = (-b-e)/ (2*a)  # Collision time - +ve and -ve
    t2 = (-b+e)/ (2*a)  # Exit time - +ve or -ve 

    # Check conditiosn to determine the actual collision time 
    # If we are overlapping and moving closer, collide now

    if ((t1<0) and (t2>0) and (b <= -0..000001)){
        # time_to_col =0 # removed/commented out because this  would cause division by zero
        return 0}
    else {
        time_to_col = t1
    }
    penalty = OMEGA * (1/time_to__col) + linalg_norm(pref_vel - new_vel)
    return penalty
} 

function collision_cone(vel, robot1_pos, robot2_pos, robot2_vel) {
    rx = robot1_pos.x 
    ry = robot1_pos.y 
    vrx = vel.x 
    vry = vel.y 

    obx = robot2_pos.x 
    oby = robot2_pos.y 
    vobx = robot2_vel.x 
    voby = robot2_vel.y 

    R = 2 * ROBOT_RADIUS + 10 

    # if constraint_val =0, no collision, else there will be a collision in the future 
    constraint_val = -((rx -obx)*(vrx- vobx) + (ry -oby )* (vry-voby)) ^ 2 + 
        (-R^2 + (rx-obx) ^2 + (ry-oby)^2) * ((vrx-vobx)^2 + (vry-voby) ^2)
    
    return constraint_val
 }



function init() {

    num_robots = ROBOT_COUNT
    s1 = swarm.create(num_robots)
    
}

function step() {


}


function reset() {


}

function destroy() {


}


function debug_output() {

}