#
# Make 'table' namespace
#
table = {}

#
# Appends an element to the table
# NOTE: this only works with integer keys.
#
table.append = function(t, x) {
  if(size(t) == 0) t[0] = x
  else t[table.maxkey(t)+1] = x
}

#
# Returns the maximum value in the table
#
table.max = function(t) {
  return reduce(t, function(k, v, a) {
      return math.max(v, a)
    },
    nil)
}

#
# Returns the maximum key in the table
#
table.maxkey = function(t) {
  return reduce(t, function(k, v, a) {
      return math.max(k, a)
    },
    nil)
}

#
# Returns the minimum value in the table
#
table.min = function(t) {
  return reduce(t, function(k, v, a) {
      return math.min(v, a)
    },
    nil)
}

#
# Returns the minimum key in the table
#
table.minkey = function(t) {
  return reduce(t, function(k, v, a) {
      return math.min(k, a)
    },
    nil)
}

#
# Prints the contents of a table.
# PARAM t: The table
#
table.print = function(t) {
  foreach(t, function(k,v) {
      log(k, " -> ", v)
    })
}

#
# Swap table elements.
# PARAM t: The table
# PARAM a: Index of first element 
# PARAM b: Index of second element
#
table.swap = function(t, i, j) {
  if(i != j) {
    var k = t[i]
    t[i] = t[j]
    t[j] = k
  }
}

#
# Number comparator.
# PARAM a: A number
# PARAM b: A number
# RETURN: nil if a > b, 1 otherwise
#
table.cmp_number = function(a, b) {
  return (a <= b)
}

#
# In-place table sorting.
# Sorts the elements of a table using the given precedence comparator.
# The comparator must follow this logic:
# function cmp(a,b) {
#   if(a <= b) return 1
#   else return 0
# }
#
# PARAM t:   The table
# PARAM cmp: The comparator
#
table.sort = function(t, cmp) {
  #
  # Partition elements by pivot
  #
  partition = function(l, h) {
    # We use the last element as pivot 
    pivot = t[h]
    # Used to mark the current element after the pivot
    var i = l
    # Move elements according to pivot
    var j = l
    while(j < h) {
      # Compare current element with pivot
      if(cmp(t[j], pivot)) {
        # Swap current element with smallest
        table.swap(t, i, j)
        # Increase index of element after pivot
        i = i + 1
      }
      # Next element
      j = j + 1
    }
    # Swap pivot element with smallest
    table.swap(t, i, h)
    return i
  }
  #
  # Quicksort
  #
  qsort = function(l, h) {
    # There are still elements to partition
    if(l < h) {
      # Partitioning index
      var p = partition(l, h)
      # Sort elements before and after p
      qsort(l, p-1)
      qsort(p+1, h)
    }
  }
  qsort(0, size(t)-1)
}

#
# In-place table shuffling.
# PARAM t: The table
#
table.shuffle = function(t) {
  # Durstenfeld shuffle algorithm
  var i = 0
  var sz = size(t)
  while(i < sz-1) {
    var j = math.rng.uniform(i, sz)
    table.swap(t, i, j)
    i = i + 1
  }
}

#
# Deep copies a table through recursion.
# PARAM t: The table
#
table.copy = function(t) {
    # Base case
    if (type(t) != "table") {
        return t
    }

    # Recursive copy of elements
    var t2 = {}
    foreach(t, function(key, value) {
        t2[key] = table.copy(value)
    })

    return t2
}
